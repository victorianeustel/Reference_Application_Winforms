// <auto-generated />
using CommandDictionary.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommandDictionary.Data.Migrations
{
    [DbContext(typeof(CommandsContext))]
    [Migration("20241218165346_Adding_Seed_Data")]
    partial class Adding_Seed_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommandDictionary.Data.Models.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "PowerShell"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Command Prompt"
                        });
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Utility"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "EF Core"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Network"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Active Directory"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Git"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Environment"
                        });
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.Command", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CommandString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CommandString = "net user SBTNET\\vneustel /domain"
                        },
                        new
                        {
                            Id = 2L,
                            CommandString = "Test-NetConnection -ComputerName \"<computer-name-variable>\" -Port <port-variable> -InformationLevel \"Detailed\""
                        },
                        new
                        {
                            Id = 3L,
                            CommandString = "dotnet ef database update --context <db-context-name-variable>"
                        },
                        new
                        {
                            Id = 4L,
                            CommandString = "dotnet ef migrations add <migration-name-variable>"
                        },
                        new
                        {
                            Id = 5L,
                            CommandString = "dotnet ef dbcontext scaffold \"Data\", \"Source=<connection-string>\" Microsoft.EntityFrameworkCore.SqlServer\""
                        },
                        new
                        {
                            Id = 6L,
                            CommandString = "echo %<env-name-variable>% | clip"
                        },
                        new
                        {
                            Id = 7L,
                            CommandString = "Set-Clipboard -Value $Env:App_Api_Token"
                        },
                        new
                        {
                            Id = 8L,
                            CommandString = "git config --global http.sslVerify true"
                        },
                        new
                        {
                            Id = 9L,
                            CommandString = "git push --mirror <target-repository-path>"
                        },
                        new
                        {
                            Id = 10L,
                            CommandString = "net group <ad-group-name-variable> /domain"
                        },
                        new
                        {
                            Id = 11L,
                            CommandString = "NET GROUP /DOMAIN"
                        });
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.CommandEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommandId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommandId");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApplicationId = 1L,
                            CategoryId = 4L,
                            CommandId = 1L,
                            Description = "Get user's group memberships"
                        },
                        new
                        {
                            Id = 2L,
                            ApplicationId = 1L,
                            CategoryId = 3L,
                            CommandId = 2L,
                            Description = "Test network status"
                        },
                        new
                        {
                            Id = 3L,
                            ApplicationId = 1L,
                            CategoryId = 2L,
                            CommandId = 3L,
                            Description = "Update database"
                        },
                        new
                        {
                            Id = 4L,
                            ApplicationId = 1L,
                            CategoryId = 2L,
                            CommandId = 4L,
                            Description = "Create migration"
                        },
                        new
                        {
                            Id = 5L,
                            ApplicationId = 1L,
                            CategoryId = 2L,
                            CommandId = 5L,
                            Description = "Scaffold database"
                        },
                        new
                        {
                            Id = 6L,
                            ApplicationId = 1L,
                            CategoryId = 4L,
                            CommandId = 11L,
                            Description = "Get all active directory groups"
                        },
                        new
                        {
                            Id = 7L,
                            ApplicationId = 1L,
                            CategoryId = 1L,
                            CommandId = 7L,
                            Description = "Copy environment variable to clipboard"
                        },
                        new
                        {
                            Id = 8L,
                            ApplicationId = 2L,
                            CategoryId = 1L,
                            CommandId = 6L,
                            Description = "Copy environment variable to clipboard"
                        },
                        new
                        {
                            Id = 9L,
                            ApplicationId = 1L,
                            CategoryId = 5L,
                            CommandId = 8L,
                            Description = "External git permissions"
                        },
                        new
                        {
                            Id = 10L,
                            ApplicationId = 1L,
                            CategoryId = 5L,
                            CommandId = 9L,
                            Description = "Clone repository to another repository"
                        },
                        new
                        {
                            Id = 11L,
                            ApplicationId = 1L,
                            CategoryId = 4L,
                            CommandId = 10L,
                            Description = "Get members of AD group"
                        });
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.CommandVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommandId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastIndex")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.CommandEntry", b =>
                {
                    b.HasOne("CommandDictionary.Data.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommandDictionary.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommandDictionary.Data.Models.Command", "Command")
                        .WithMany()
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Category");

                    b.Navigation("Command");
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.CommandVariable", b =>
                {
                    b.HasOne("CommandDictionary.Data.Models.Command", null)
                        .WithMany("Variables")
                        .HasForeignKey("CommandId");
                });

            modelBuilder.Entity("CommandDictionary.Data.Models.Command", b =>
                {
                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
